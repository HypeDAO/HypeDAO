/* Generated by restful-react */

import React from "react";
import { Get, GetProps, useGet, UseGetProps } from "restful-react";
export const SPEC_VERSION = "latest"; 
export interface UserResponse {
  user_badges?: {}[];
  user?: {
  id?: number;
  username?: string;
  name?: string;
  avatar_template?: string;
  last_posted_at?: any;
  last_seen_at?: any;
  created_at?: string;
  ignored?: boolean;
  muted?: boolean;
  can_ignore_user?: boolean;
  can_mute_user?: boolean;
  can_send_private_messages?: boolean;
  can_send_private_message_to_user?: boolean;
  trust_level?: number;
  moderator?: boolean;
  admin?: boolean;
  title?: any;
  badge_count?: number;
  user_fields?: {};
  custom_fields?: {};
  time_read?: number;
  recent_time_read?: number;
  primary_group_id?: any;
  primary_group_name?: any;
  flair_url?: any;
  flair_bg_color?: any;
  flair_color?: any;
  featured_topic?: any;
  staged?: boolean;
  can_edit?: boolean;
  can_edit_username?: boolean;
  can_edit_email?: boolean;
  can_edit_name?: boolean;
  uploaded_avatar_id?: any;
  has_title_badges?: boolean;
  pending_count?: number;
  profile_view_count?: number;
  second_factor_enabled?: boolean;
  can_upload_profile_header?: boolean;
  can_upload_user_card_background?: boolean;
  post_count?: number;
  can_be_deleted?: boolean;
  can_delete_all_posts?: boolean;
  locale?: any;
  muted_category_ids?: {}[];
  regular_category_ids?: {}[];
  watched_tags?: {}[];
  watching_first_post_tags?: {}[];
  tracked_tags?: {}[];
  muted_tags?: {}[];
  tracked_category_ids?: {}[];
  watched_category_ids?: {}[];
  watched_first_post_category_ids?: {}[];
  system_avatar_upload_id?: any;
  system_avatar_template?: string;
  muted_usernames?: {}[];
  ignored_usernames?: {}[];
  allowed_pm_usernames?: {}[];
  mailing_list_posts_per_day?: number;
  can_change_bio?: boolean;
  can_change_location?: boolean;
  can_change_website?: boolean;
  user_api_keys?: any;
  user_auth_tokens?: {
  id?: number;
  client_ip?: string;
  location?: string;
  browser?: string;
  device?: string;
  os?: string;
  icon?: string;
  created_at?: string;
  seen_at?: string;
  is_active?: boolean;
}[];
  featured_user_badge_ids?: {}[];
  invited_by?: any;
  groups?: {
  id?: number;
  automatic?: boolean;
  name?: string;
  display_name?: string;
  user_count?: number;
  mentionable_level?: number;
  messageable_level?: number;
  visibility_level?: number;
  primary_group?: boolean;
  title?: any;
  grant_trust_level?: any;
  incoming_email?: any;
  has_messages?: boolean;
  flair_url?: any;
  flair_bg_color?: any;
  flair_color?: any;
  bio_raw?: any;
  bio_cooked?: any;
  bio_excerpt?: any;
  public_admission?: boolean;
  public_exit?: boolean;
  allow_membership_requests?: boolean;
  full_name?: any;
  default_notification_level?: number;
  membership_request_template?: any;
  members_visibility_level?: number;
  can_see_members?: boolean;
  can_admin_group?: boolean;
  publish_read_state?: boolean;
}[];
  group_users?: {
  group_id?: number;
  user_id?: number;
  notification_level?: number;
}[];
  user_option?: {
  user_id?: number;
  mailing_list_mode?: boolean;
  mailing_list_mode_frequency?: number;
  email_digests?: boolean;
  email_level?: number;
  email_messages_level?: number;
  external_links_in_new_tab?: boolean;
  color_scheme_id?: any;
  dark_scheme_id?: any;
  dynamic_favicon?: boolean;
  enable_quoting?: boolean;
  enable_defer?: boolean;
  digest_after_minutes?: number;
  automatically_unpin_topics?: boolean;
  auto_track_topics_after_msecs?: number;
  notification_level_when_replying?: number;
  new_topic_duration_minutes?: number;
  email_previous_replies?: number;
  email_in_reply_to?: boolean;
  like_notification_frequency?: number;
  include_tl0_in_digests?: boolean;
  theme_ids?: {}[];
  theme_key_seq?: number;
  allow_private_messages?: boolean;
  enable_allowed_pm_users?: boolean;
  homepage_id?: any;
  hide_profile_and_presence?: boolean;
  text_size?: string;
  text_size_seq?: number;
  title_count_mode?: string;
  timezone?: any;
  skip_new_user_tips?: boolean;
};
};
}

export interface GetPostsResponse {
  latest_posts?: {
  id?: number;
  name?: string;
  username?: string;
  avatar_template?: string;
  created_at?: string;
  cooked?: string;
  post_number?: number;
  post_type?: number;
  updated_at?: string;
  reply_count?: number;
  reply_to_post_number?: any;
  quote_count?: number;
  incoming_link_count?: number;
  reads?: number;
  readers_count?: number;
  score?: number;
  yours?: boolean;
  topic_id?: number;
  topic_slug?: string;
  topic_title?: string;
  topic_html_title?: string;
  category_id?: number;
  display_username?: string;
  primary_group_name?: any;
  flair_name?: any;
  flair_url?: any;
  flair_bg_color?: any;
  flair_color?: any;
  version?: number;
  can_edit?: boolean;
  can_delete?: boolean;
  can_recover?: boolean;
  can_wiki?: boolean;
  user_title?: any;
  raw?: string;
  actions_summary?: {
  id?: number;
  can_act?: boolean;
}[];
  moderator?: boolean;
  admin?: boolean;
  staff?: boolean;
  user_id?: number;
  hidden?: boolean;
  trust_level?: number;
  deleted_at?: any;
  user_deleted?: boolean;
  edit_reason?: any;
  can_view_edit_history?: boolean;
  wiki?: boolean;
  reviewable_id?: any;
  reviewable_score_count?: number;
  reviewable_score_pending_count?: number;
}[];
}

export type GetPostsProps = Omit<GetProps<GetPostsResponse, unknown, void, void>, "path">;

/**
 * List latest posts across topics
 */
export const GetPosts = (props: GetPostsProps) => (
  <Get<GetPostsResponse, unknown, void, void>
    path={`/posts.json`}
    
    {...props}
  />
);

export type UseGetPostsProps = Omit<UseGetProps<GetPostsResponse, unknown, void, void>, "path">;

/**
 * List latest posts across topics
 */
export const useGetPosts = (props: UseGetPostsProps) => useGet<GetPostsResponse, unknown, void, void>(`/posts.json`, props);


export interface GetPostResponse {
  id?: number;
  name?: any;
  username?: string;
  avatar_template?: string;
  created_at?: string;
  cooked?: string;
  post_number?: number;
  post_type?: number;
  updated_at?: string;
  reply_count?: number;
  reply_to_post_number?: any;
  quote_count?: number;
  incoming_link_count?: number;
  reads?: number;
  readers_count?: number;
  score?: number;
  yours?: boolean;
  topic_id?: number;
  topic_slug?: string;
  display_username?: any;
  primary_group_name?: any;
  flair_name?: any;
  flair_url?: any;
  flair_bg_color?: any;
  flair_color?: any;
  version?: number;
  can_edit?: boolean;
  can_delete?: boolean;
  can_recover?: boolean;
  can_wiki?: boolean;
  user_title?: any;
  raw?: string;
  actions_summary?: {
  id?: number;
  can_act?: boolean;
}[];
  moderator?: boolean;
  admin?: boolean;
  staff?: boolean;
  user_id?: number;
  hidden?: boolean;
  trust_level?: number;
  deleted_at?: any;
  user_deleted?: boolean;
  edit_reason?: any;
  can_view_edit_history?: boolean;
  wiki?: boolean;
  reviewable_id?: any;
  reviewable_score_count?: number;
  reviewable_score_pending_count?: number;
}

export interface GetPostPathParams {
  id: string
}

export type GetPostProps = Omit<GetProps<GetPostResponse, unknown, void, GetPostPathParams>, "path"> & GetPostPathParams;

/**
 * Retrieve a single post
 */
export const GetPost = ({id, ...props}: GetPostProps) => (
  <Get<GetPostResponse, unknown, void, GetPostPathParams>
    path={`/posts/${id}.json`}
    
    {...props}
  />
);

export type UseGetPostProps = Omit<UseGetProps<GetPostResponse, unknown, void, GetPostPathParams>, "path"> & GetPostPathParams;

/**
 * Retrieve a single post
 */
export const useGetPost = ({id, ...props}: UseGetPostProps) => useGet<GetPostResponse, unknown, void, GetPostPathParams>((paramsInPath: GetPostPathParams) => `/posts/${paramsInPath.id}.json`, {  pathParams: { id }, ...props });

